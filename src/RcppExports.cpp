// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// FastCoOccur_Rcpp
Rcpp::DataFrame FastCoOccur_Rcpp(Rcpp::NumericMatrix otu_table, Rcpp::List treatment_indices, Rcpp::StringVector treatment_names, double p_cutoff, const int ncores);
RcppExport SEXP _phylosmith_FastCoOccur_Rcpp(SEXP otu_tableSEXP, SEXP treatment_indicesSEXP, SEXP treatment_namesSEXP, SEXP p_cutoffSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type otu_table(otu_tableSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type treatment_indices(treatment_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type treatment_names(treatment_namesSEXP);
    Rcpp::traits::input_parameter< double >::type p_cutoff(p_cutoffSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(FastCoOccur_Rcpp(otu_table, treatment_indices, treatment_names, p_cutoff, ncores));
    return rcpp_result_gen;
END_RCPP
}
// FastCoOccur_rho_Rcpp
std::vector<double> FastCoOccur_rho_Rcpp(Rcpp::NumericMatrix otu_table, Rcpp::List treatment_indices, Rcpp::StringVector treatment_names, const int ncores);
RcppExport SEXP _phylosmith_FastCoOccur_rho_Rcpp(SEXP otu_tableSEXP, SEXP treatment_indicesSEXP, SEXP treatment_namesSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type otu_table(otu_tableSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type treatment_indices(treatment_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type treatment_names(treatment_namesSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(FastCoOccur_rho_Rcpp(otu_table, treatment_indices, treatment_names, ncores));
    return rcpp_result_gen;
END_RCPP
}
// arrange_cooccurr_table
Rcpp::DataFrame arrange_cooccurr_table(Rcpp::DataFrame cooccurrence_table, Rcpp::CharacterVector taxa_of_interest);
RcppExport SEXP _phylosmith_arrange_cooccurr_table(SEXP cooccurrence_tableSEXP, SEXP taxa_of_interestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type cooccurrence_table(cooccurrence_tableSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type taxa_of_interest(taxa_of_interestSEXP);
    rcpp_result_gen = Rcpp::wrap(arrange_cooccurr_table(cooccurrence_table, taxa_of_interest));
    return rcpp_result_gen;
END_RCPP
}
// match_sequences
Rcpp::DataFrame match_sequences(Rcpp::NumericMatrix short_input, Rcpp::NumericMatrix long_input);
RcppExport SEXP _phylosmith_match_sequences(SEXP short_inputSEXP, SEXP long_inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type short_input(short_inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type long_input(long_inputSEXP);
    rcpp_result_gen = Rcpp::wrap(match_sequences(short_input, long_input));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_phylosmith_FastCoOccur_Rcpp", (DL_FUNC) &_phylosmith_FastCoOccur_Rcpp, 5},
    {"_phylosmith_FastCoOccur_rho_Rcpp", (DL_FUNC) &_phylosmith_FastCoOccur_rho_Rcpp, 4},
    {"_phylosmith_arrange_cooccurr_table", (DL_FUNC) &_phylosmith_arrange_cooccurr_table, 2},
    {"_phylosmith_match_sequences", (DL_FUNC) &_phylosmith_match_sequences, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_phylosmith(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
