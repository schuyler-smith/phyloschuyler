apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) <= cutoff}, TRUE)
return(sub_phy)}))
} else {
new_phyloseq_obj <- do.call(merge_phyloseq,
apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) >= cutoff}, TRUE)
if(sum(taxa_sums(sub_phy)) != 0){sub_phy <- filter_taxa(sub_phy, function(x){sum(x) != 0}, TRUE)}
return(sub_phy)}))
}
}else {
cutoff <- floor(ncol(otu_table(phyloseq_obj)) * frequency)
if(below == TRUE){
new_phyloseq_obj <- filter_taxa(phyloseq_obj, function(x){sum(x != 0) <= cutoff}, TRUE)
} else {
new_phyloseq_obj <- filter_taxa(phyloseq_obj, function(x){sum(x != 0) >= cutoff}, TRUE)
new_phyloseq_obj <- filter_taxa(new_phyloseq_obj, function(x){sum(x) != 0}, TRUE)
}
}
if(drop_samples == TRUE){
new_phyloseq_obj <- prune_samples(sample_sums(phyloseq_obj) > 0, phyloseq_obj)
}
return(new_phyloseq_obj)
}
find_generalists(mock_phyloseq, 0.3, "day")
treatments
Treatment_Groups <- setDT(as(sample_data(new_phyloseq_obj)[,colnames(sample_data(new_phyloseq_obj)) %in% treatment], "data.frame"))
# Treatment_Groups[, Treatment_Group := .GRP, by = Treatment_Groups]
eval(parse(text=paste0("Treatment_Groups[, Treatment_Group := paste(", paste(treatment, collapse = ", "), ", sep = '-'), by = Treatment_Groups]")))
sample_data(new_phyloseq_obj)[,'Treatment_Group'] <- Treatment_Groups[,"Treatment_Group"]
Treatment_Groups <- unique(Treatment_Groups[,"Treatment_Group"])
new_phyloseq_obj <- do.call(merge_phyloseq,
apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) >= cutoff}, TRUE)
if(sum(taxa_sums(sub_phy)) != 0){sub_phy <- filter_taxa(sub_phy, function(x){sum(x) != 0}, TRUE)}
return(sub_phy)}))
Treatment_Groups
new_phyloseq_obj <- do.call(merge_phyloseq,
apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(new_phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) >= cutoff}, TRUE)
if(sum(taxa_sums(sub_phy)) != 0){sub_phy <- filter_taxa(sub_phy, function(x){sum(x) != 0}, TRUE)}
return(sub_phy)}))
find_generalists <- function(phyloseq_obj, frequency = 0, treatments = NULL, subset = NULL, below = FALSE, drop_samples = FALSE){
# phyloseq_obj <- prune_samples(sample_sums(phyloseq_obj) > 0, phyloseq_obj)
if(!(is.null(treatments))){
if(is.numeric(treatments)){treatment <- colnames(sample_data(phyloseq_obj)[,treatments])
} else {treatment <- eval(parse(text=paste0("colnames(sample_data(phyloseq_obj)[,c('", paste0(treatments, collapse = "', '"), "')])")))
}
if(!(is.null(subset)) & length(treatment) == 1){
new_phyloseq_obj <- eval(parse(text=paste0("subset_samples(phyloseq_obj, ", paste0(treatment), " %in% c('", paste0(subset, collapse = "', '"), "'))")))
new_phyloseq_obj <- filter_taxa(new_phyloseq_obj, function(x){sum(x) > 0}, TRUE)
}
Treatment_Groups <- setDT(as(sample_data(new_phyloseq_obj)[,colnames(sample_data(new_phyloseq_obj)) %in% treatment], "data.frame"))
# Treatment_Groups[, Treatment_Group := .GRP, by = Treatment_Groups]
eval(parse(text=paste0("Treatment_Groups[, Treatment_Group := paste(", paste(treatment, collapse = ", "), ", sep = '-'), by = Treatment_Groups]")))
sample_data(new_phyloseq_obj)[,'Treatment_Group'] <- Treatment_Groups[,"Treatment_Group"]
Treatment_Groups <- unique(Treatment_Groups[,"Treatment_Group"])
# new_phyloseq_obj <- phyloseq(otu_table(new_phyloseq_obj), tax_table(new_phyloseq_obj), sample_data(new_phyloseq_obj))
if(below == TRUE){
new_phyloseq_obj <- do.call(merge_phyloseq,
apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(new_phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) <= cutoff}, TRUE)
return(sub_phy)}))
} else {
new_phyloseq_obj <- do.call(merge_phyloseq,
apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(new_phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) >= cutoff}, TRUE)
if(sum(taxa_sums(sub_phy)) != 0){sub_phy <- filter_taxa(sub_phy, function(x){sum(x) != 0}, TRUE)}
return(sub_phy)}))
}
}else {
cutoff <- floor(ncol(otu_table(phyloseq_obj)) * frequency)
if(below == TRUE){
new_phyloseq_obj <- filter_taxa(phyloseq_obj, function(x){sum(x != 0) <= cutoff}, TRUE)
} else {
new_phyloseq_obj <- filter_taxa(phyloseq_obj, function(x){sum(x != 0) >= cutoff}, TRUE)
new_phyloseq_obj <- filter_taxa(new_phyloseq_obj, function(x){sum(x) != 0}, TRUE)
}
}
if(drop_samples == TRUE){
new_phyloseq_obj <- prune_samples(sample_sums(phyloseq_obj) > 0, phyloseq_obj)
}
return(new_phyloseq_obj)
}
find_generalists(mock_phyloseq, 0.3, "day")
phyloseq_obj
# phyloseq_obj <- prune_samples(sample_sums(phyloseq_obj) > 0, phyloseq_obj)
if(!(is.null(treatments))){
if(is.numeric(treatments)){treatment <- colnames(sample_data(phyloseq_obj)[,treatments])
} else {treatment <- eval(parse(text=paste0("colnames(sample_data(phyloseq_obj)[,c('", paste0(treatments, collapse = "', '"), "')])")))
}
if(!(is.null(subset)) & length(treatment) == 1){
new_phyloseq_obj <- eval(parse(text=paste0("subset_samples(phyloseq_obj, ", paste0(treatment), " %in% c('", paste0(subset, collapse = "', '"), "'))")))
new_phyloseq_obj <- filter_taxa(new_phyloseq_obj, function(x){sum(x) > 0}, TRUE)
}
Treatment_Groups <- setDT(as(sample_data(new_phyloseq_obj)[,colnames(sample_data(new_phyloseq_obj)) %in% treatment], "data.frame"))
# Treatment_Groups[, Treatment_Group := .GRP, by = Treatment_Groups]
eval(parse(text=paste0("Treatment_Groups[, Treatment_Group := paste(", paste(treatment, collapse = ", "), ", sep = '-'), by = Treatment_Groups]")))
sample_data(new_phyloseq_obj)[,'Treatment_Group'] <- Treatment_Groups[,"Treatment_Group"]
Treatment_Groups <- unique(Treatment_Groups[,"Treatment_Group"])
# new_phyloseq_obj <- phyloseq(otu_table(new_phyloseq_obj), tax_table(new_phyloseq_obj), sample_data(new_phyloseq_obj))
if(below == TRUE){
new_phyloseq_obj <- do.call(merge_phyloseq,
apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(new_phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) <= cutoff}, TRUE)
return(sub_phy)}))
} else {
new_phyloseq_obj <- do.call(merge_phyloseq,
apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(new_phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) >= cutoff}, TRUE)
if(sum(taxa_sums(sub_phy)) != 0){sub_phy <- filter_taxa(sub_phy, function(x){sum(x) != 0}, TRUE)}
return(sub_phy)}))
}
}else {
cutoff <- floor(ncol(otu_table(phyloseq_obj)) * frequency)
if(below == TRUE){
new_phyloseq_obj <- filter_taxa(phyloseq_obj, function(x){sum(x != 0) <= cutoff}, TRUE)
} else {
new_phyloseq_obj <- filter_taxa(phyloseq_obj, function(x){sum(x != 0) >= cutoff}, TRUE)
new_phyloseq_obj <- filter_taxa(new_phyloseq_obj, function(x){sum(x) != 0}, TRUE)
}
}
new_phyloseq_obj
!(is.null(treatments))
is.numeric(treatments)
treatment
!(is.null(subset)) & length(treatment) == 1
Treatment_Groups
Treatment_Groups <- setDT(as(sample_data(new_phyloseq_obj)[,colnames(sample_data(new_phyloseq_obj)) %in% treatment], "data.frame"))
Treatment_Groups
# Treatment_Groups[, Treatment_Group := .GRP, by = Treatment_Groups]
eval(parse(text=paste0("Treatment_Groups[, Treatment_Group := paste(", paste(treatment, collapse = ", "), ", sep = '-'), by = Treatment_Groups]")))
Treatment_Groups
sample_data(new_phyloseq_obj)[,'Treatment_Group'] <- Treatment_Groups[,"Treatment_Group"]
sample_data(new_phyloseq_obj)
Treatment_Groups <- unique(Treatment_Groups[,"Treatment_Group"])
# new_phyloseq_obj <- phyloseq(otu_table(new_phyloseq_obj), tax_table(new_phyloseq_obj), sample_data(new_phyloseq_obj))
if(below == TRUE){
new_phyloseq_obj <- do.call(merge_phyloseq,
apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(new_phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) <= cutoff}, TRUE)
return(sub_phy)}))
} else {
new_phyloseq_obj <- do.call(merge_phyloseq,
apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(new_phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) >= cutoff}, TRUE)
if(sum(taxa_sums(sub_phy)) != 0){sub_phy <- filter_taxa(sub_phy, function(x){sum(x) != 0}, TRUE)}
return(sub_phy)}))
}
new_phyloseq_obj
new_phyloseq_obj
new_phyloseq_obj <- filter_taxa(phyloseq_obj, function(x){sum(x != 0) <= cutoff}, TRUE)
new_phyloseq_obj
new_phyloseq_obj <- filter_taxa(phyloseq_obj, function(x){sum(x != 0) >= cutoff}, TRUE)
new_phyloseq_obj
new_phyloseq_obj <- filter_taxa(new_phyloseq_obj, function(x){sum(x) != 0}, TRUE)
new_phyloseq_obj
source("../phyloseq_scripts/find_phyloseq_generalists.R")
find_generalists(mock_phyloseq, 0.3, "day")
find_generalists(mock_phyloseq, 0.3, "treatment")
find_generalists(mock_phyloseq, 0.3, 1)
find_generalists(mock_phyloseq, 0.3, 2)
find_generalists(mock_phyloseq, 0.3, 3)
find_generalists(mock_phyloseq, 0.3)
(!(is.null(treatments))
)
rm(treatment)
if(is.numeric(treatments)){treatment <- colnames(sample_data(phyloseq_obj)[,treatments])
} else {treatment <- eval(parse(text=paste0("colnames(sample_data(phyloseq_obj)[,c('", paste0(treatments, collapse = "', '"), "')])")))
}
treatment
phyloseq_obj
!(is.null(treatments))
if(is.numeric(treatments)){treatment <- colnames(sample_data(phyloseq_obj)[,treatments])
} else {treatment <- eval(parse(text=paste0("colnames(sample_data(phyloseq_obj)[,c('", paste0(treatments, collapse = "', '"), "')])")))
}
treatment
!(is.null(subset)) & length(treatment) == 1
phyloseq_obj <- filter_taxa(phyloseq_obj, function(x){sum(x) > 0}, TRUE)
phyloseq_obj
Treatment_Groups <- setDT(as(sample_data(phyloseq_obj)[,colnames(sample_data(phyloseq_obj)) %in% treatment], "data.frame"))
# Treatment_Groups[, Treatment_Group := .GRP, by = Treatment_Groups]
eval(parse(text=paste0("Treatment_Groups[, Treatment_Group := paste(", paste(treatment, collapse = ", "), ", sep = '-'), by = Treatment_Groups]")))
sample_data(phyloseq_obj)[,'Treatment_Group'] <- Treatment_Groups[,"Treatment_Group"]
Treatment_Groups <- unique(Treatment_Groups[,"Treatment_Group"])
Treatment_Groups
array(Treatment_Groups)
apply(array(Treatment_Groups), 1, FUN = function(group){
sub_phy <- eval(parse(text=paste0("subset_samples(phyloseq_obj, Treatment_Group == '",group,"')")))
cutoff <- floor(ncol(otu_table(sub_phy)) * frequency)
sub_phy <- filter_taxa(sub_phy, function(x){sum(x != 0) <= cutoff}, TRUE)
return(sub_phy)})
library(phyloschuyler)
install()
library(phyloschuyler)
library(phyloschuyler)
find_generalists(mock_phyloseq)
find_generalists(mock_phyloseq, 0.3)
find_generalists(mock_phyloseq, 0.3, "day")
otu_table(find_generalists(mock_phyloseq, 0.3, "day"))
otu_table(mock_phyloseq)
otu_table(find_generalists(mock_phyloseq, 0.3, "day", subset = "5"))
library(devtools)
document
document()
Rcpp::compileAttributes()
devtools::install_github("schuyler-smith/phyloschuyler")
library(phyloschuyler)
phyloseq_ggplot.pca<-function(phyloseq_object, treatment_name){
require(ggplot2); require(vegan); require(RColorBrewer); require(phyloseq)
getPalette = colorRampPalette(brewer.pal(8, "Dark2")); colorCount = 1 + length(unlist(unique(sample_data(phyloseq_object)[,treatment_name]))); colors = getPalette(colorCount); theme_set(theme_bw())
subset_otu <- otu_table(phyloseq_object)
cpm_log <- cpm(subset_otu, log = TRUE)
median_log2_cpm <- apply(cpm_log, 1, median)
expr_cutoff <- median(cpm_log)
subset_otu <- subset_otu[median_log2_cpm > expr_cutoff, ]
cpm_log <- cpm(subset_otu, log = TRUE)
pca <- prcomp(t(cpm_log), scale. = TRUE)
# summary(pca)
Treatment <- sample_data(phyloseq_object)[,treatment_name]
PC_1 <- pca$x[, 'PC1']
PC_2 <- pca$x[, 'PC2']
pca <- data.frame(PC_1,PC_2,Treatment)
pca.narm <- subset(pca, !is.na(Treatment))
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100){
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))}
df_ell <- data.frame()
for(g in unique(pca.narm[,treatment_name])){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(pca.narm[pca.narm[,treatment_name]==g,], veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov,center=c(mean(PC_1),mean(PC_2))))),group=g))}
p <- ggplot(data = pca.narm, aes(PC_1, PC_2)) +
geom_point(aes(color = treatment_name), size=1.5, alpha=0.75) +
geom_path(data=df_ell, aes(x=PC_1, y=PC_2, colour=group), size=2, linetype=5) +
scale_color_manual(values=colors) +
theme_classic() +
theme(aspect.ratio=1,
axis.line.x = element_line(colour = 'black', size=1, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=1, linetype='solid'),
axis.text.x=element_text(size=10, face = "bold"),
axis.text.y=element_text(size=10, face = "bold"),
axis.title.x=element_text(size=12, face= "bold"),
axis.title.y=element_text(size=12, face= "bold"),
legend.title=element_blank(),
legend.text=element_text(size=11, face= "bold"),
legend.background = element_rect(fill=(alpha = 0))
)
p
}
phyloseq_ggplot.pca(mock_phyloseq, "day")
?cpm
??cpm
phyloseq_ggplot.pca<-function(phyloseq_object, treatment_name){
require(ggplot2); require(vegan); require(RColorBrewer); require(phyloseq), require(edgeR)
getPalette = colorRampPalette(brewer.pal(8, "Dark2")); colorCount = 1 + length(unlist(unique(sample_data(phyloseq_object)[,treatment_name]))); colors = getPalette(colorCount); theme_set(theme_bw())
subset_otu <- otu_table(phyloseq_object)
cpm_log <- cpm(subset_otu, log = TRUE)
median_log2_cpm <- apply(cpm_log, 1, median)
expr_cutoff <- median(cpm_log)
subset_otu <- subset_otu[median_log2_cpm > expr_cutoff, ]
cpm_log <- cpm(subset_otu, log = TRUE)
pca <- prcomp(t(cpm_log), scale. = TRUE)
# summary(pca)
Treatment <- sample_data(phyloseq_object)[,treatment_name]
PC_1 <- pca$x[, 'PC1']
PC_2 <- pca$x[, 'PC2']
pca <- data.frame(PC_1,PC_2,Treatment)
pca.narm <- subset(pca, !is.na(Treatment))
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100){
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))}
df_ell <- data.frame()
for(g in unique(pca.narm[,treatment_name])){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(pca.narm[pca.narm[,treatment_name]==g,], veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov,center=c(mean(PC_1),mean(PC_2))))),group=g))}
p <- ggplot(data = pca.narm, aes(PC_1, PC_2)) +
geom_point(aes(color = treatment_name), size=1.5, alpha=0.75) +
geom_path(data=df_ell, aes(x=PC_1, y=PC_2, colour=group), size=2, linetype=5) +
scale_color_manual(values=colors) +
theme_classic() +
theme(aspect.ratio=1,
axis.line.x = element_line(colour = 'black', size=1, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=1, linetype='solid'),
axis.text.x=element_text(size=10, face = "bold"),
axis.text.y=element_text(size=10, face = "bold"),
axis.title.x=element_text(size=12, face= "bold"),
axis.title.y=element_text(size=12, face= "bold"),
legend.title=element_blank(),
legend.text=element_text(size=11, face= "bold"),
legend.background = element_rect(fill=(alpha = 0))
)
p
}
phyloseq_ggplot.pca<-function(phyloseq_object, treatment_name){
require(ggplot2); require(vegan); require(RColorBrewer); require(phyloseq); require(edgeR)
getPalette = colorRampPalette(brewer.pal(8, "Dark2")); colorCount = 1 + length(unlist(unique(sample_data(phyloseq_object)[,treatment_name]))); colors = getPalette(colorCount); theme_set(theme_bw())
subset_otu <- otu_table(phyloseq_object)
cpm_log <- cpm(subset_otu, log = TRUE)
median_log2_cpm <- apply(cpm_log, 1, median)
expr_cutoff <- median(cpm_log)
subset_otu <- subset_otu[median_log2_cpm > expr_cutoff, ]
cpm_log <- cpm(subset_otu, log = TRUE)
pca <- prcomp(t(cpm_log), scale. = TRUE)
# summary(pca)
Treatment <- sample_data(phyloseq_object)[,treatment_name]
PC_1 <- pca$x[, 'PC1']
PC_2 <- pca$x[, 'PC2']
pca <- data.frame(PC_1,PC_2,Treatment)
pca.narm <- subset(pca, !is.na(Treatment))
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100){
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))}
df_ell <- data.frame()
for(g in unique(pca.narm[,treatment_name])){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(pca.narm[pca.narm[,treatment_name]==g,], veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov,center=c(mean(PC_1),mean(PC_2))))),group=g))}
p <- ggplot(data = pca.narm, aes(PC_1, PC_2)) +
geom_point(aes(color = treatment_name), size=1.5, alpha=0.75) +
geom_path(data=df_ell, aes(x=PC_1, y=PC_2, colour=group), size=2, linetype=5) +
scale_color_manual(values=colors) +
theme_classic() +
theme(aspect.ratio=1,
axis.line.x = element_line(colour = 'black', size=1, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=1, linetype='solid'),
axis.text.x=element_text(size=10, face = "bold"),
axis.text.y=element_text(size=10, face = "bold"),
axis.title.x=element_text(size=12, face= "bold"),
axis.title.y=element_text(size=12, face= "bold"),
legend.title=element_blank(),
legend.text=element_text(size=11, face= "bold"),
legend.background = element_rect(fill=(alpha = 0))
)
p
}
phyloseq_ggplot.pca(mock_phyloseq, "day")
phyloseq_object =mock_phyloseq
treatment_name = "day"
require(ggplot2); require(vegan); require(RColorBrewer); require(phyloseq); require(edgeR)
getPalette = colorRampPalette(brewer.pal(8, "Dark2")); colorCount = 1 + length(unlist(unique(sample_data(phyloseq_object)[,treatment_name]))); colors = getPalette(colorCount); theme_set(theme_bw())
if(is.numeric(treatment_name)){treatment_name <- colnames(phyloseq::sample_data(phyloseq_obj)[,treatment_name])
} else {treatment_name <- eval(parse(text=paste0("colnames(phyloseq::sample_data(phyloseq_obj)[,c('", paste0(treatment_name, collapse = "', '"), "')])")))
}
if(is.numeric(treatment_name)){treatment_name <- colnames(phyloseq::sample_data(phyloseq_object)[,treatment_name])
} else {treatment_name <- eval(parse(text=paste0("colnames(phyloseq::sample_data(phyloseq_object)[,c('", paste0(treatment_name, collapse = "', '"), "')])")))
}
getPalette = colorRampPalette(brewer.pal(8, "Dark2")); colorCount = 1 + length(unlist(unique(sample_data(phyloseq_object)[,treatment_name]))); colors = getPalette(colorCount); theme_set(theme_bw())
phyloseq_obj =mock_phyloseq
require(ggplot2); require(vegan); require(RColorBrewer); require(phyloseq); require(edgeR)
if(is.numeric(treatment_name)){treatment_name <- colnames(phyloseq::sample_data(phyloseq_obj)[,treatment_name])
} else {treatment_name <- eval(parse(text=paste0("colnames(phyloseq::sample_data(phyloseq_obj)[,c('", paste0(treatment_name, collapse = "', '"), "')])")))
}
if(is.numeric(treatment_name)){treatment_name <- colnames(phyloseq::sample_data(phyloseq_obj)[,treatment_name])
} else {treatment_name <- eval(parse(text=paste0("colnames(phyloseq::sample_data(phyloseq_obj)[,c('", paste0(treatment_name, collapse = "', '"), "')])")))
}
getPalette = colorRampPalette(brewer.pal(8, "Dark2")); colorCount = 1 + length(unlist(unique(sample_data(phyloseq_obj)[,treatment_name]))); colors = getPalette(colorCount); theme_set(theme_bw())
subset_otu <- otu_table(phyloseq_obj)
cpm_log <- cpm(subset_otu, log = TRUE)
median_log2_cpm <- apply(cpm_log, 1, median)
expr_cutoff <- median(cpm_log)
subset_otu <- subset_otu[median_log2_cpm > expr_cutoff, ]
cpm_log <- cpm(subset_otu, log = TRUE)
expr_cutoff
median_log2_cpm
subset_otu
cpm_log <- cpm(subset_otu, log = TRUE)
cpm_log <- cpm(subset_otu, log = TRUE)
subset_otu <- otu_table(phyloseq_obj)
cpm_log <- cpm(subset_otu, log = TRUE)
pca <- prcomp(t(cpm_log), scale. = TRUE)
pca
median_log2_cpm
expr_cutoff
median_log2_cpm
pca <- prcomp(t(cpm_log), scale. = TRUE)
Treatment <- sample_data(phyloseq_object)[,treatment_name]
PC_1 <- pca$x[, 'PC1']
PC_2 <- pca$x[, 'PC2']
pca <- data.frame(PC_1,PC_2,Treatment)
pca.narm <- subset(pca, !is.na(Treatment))
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100){
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))}
df_ell <- data.frame()
for(g in unique(pca.narm[,treatment_name])){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(pca.narm[pca.narm[,treatment_name]==g,], veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov,center=c(mean(PC_1),mean(PC_2))))),group=g))}
p <- ggplot(data = pca.narm, aes(PC_1, PC_2)) +
geom_point(aes(color = treatment_name), size=1.5, alpha=0.75) +
geom_path(data=df_ell, aes(x=PC_1, y=PC_2, colour=group), size=2, linetype=5) +
scale_color_manual(values=colors) +
theme_classic() +
theme(aspect.ratio=1,
axis.line.x = element_line(colour = 'black', size=1, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=1, linetype='solid'),
axis.text.x=element_text(size=10, face = "bold"),
axis.text.y=element_text(size=10, face = "bold"),
axis.title.x=element_text(size=12, face= "bold"),
axis.title.y=element_text(size=12, face= "bold"),
legend.title=element_blank(),
legend.text=element_text(size=11, face= "bold"),
legend.background = element_rect(fill=(alpha = 0))
)
p
df_ell
unique(pca.narm[,treatment_name])
pca.narm[,treatment_name]
pca.narm[pca.narm[,treatment_name]==g,]
for(g in unique(pca.narm[,treatment_name])){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(pca.narm[pca.narm[,treatment_name]==g,], veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov,center=c(mean(PC_1),mean(PC_2))))),group=g))}
Treatment
subset_otu <- otu_table(phyloseq_obj)
pca <- prcomp(t(subset_otu), scale. = TRUE)
Treatment <- sample_data(phyloseq_object)[,treatment_name]
PC_1 <- pca$x[, 'PC1']
PC_2 <- pca$x[, 'PC2']
pca <- data.frame(PC_1,PC_2,Treatment)
pca.narm <- subset(pca, !is.na(Treatment))
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100){
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))}
df_ell <- data.frame()
for(g in unique(pca.narm[,treatment_name])){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(pca.narm[pca.narm[,treatment_name]==g,], veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov,center=c(mean(PC_1),mean(PC_2))))),group=g))}
treatment_name
unique(pca.narm[,treatment_name])
subset(pca, !is.na(Treatment))
pca.narm <- as.character(subset(pca, !is.na(Treatment)))
pca.narm
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100){
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))}
df_ell <- data.frame()
unique(pca.narm[,treatment_name])
treatment_name
pca.narm
Treatment <- sample_data(phyloseq_object)[,treatment_name]
PC_1 <- pca$x[, 'PC1']
PC_2 <- pca$x[, 'PC2']
pca <- data.frame(PC_1,PC_2,Treatment)
pca.narm <- as.character(subset(pca, !is.na(Treatment)))
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100){
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))}
pca.narm
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100){
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))}
df_ell <- data.frame()
pca.narm[,treatment_name]
pca <- prcomp(t(subset_otu), scale. = TRUE)
Treatment <- sample_data(phyloseq_object)[,treatment_name]
PC_1 <- pca$x[, 'PC1']
PC_2 <- pca$x[, 'PC2']
pca <- data.frame(PC_1,PC_2,Treatment)
pca.narm <- as.character(subset(pca, !is.na(Treatment)))
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100){
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))}
df_ell <- data.frame()
unique(pca.narm[,treatment_name])
pca.narm
Treatment
pca.narm
pca.narm <- subset(pca, !is.na(Treatment))
pca.narm
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100){
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))}
unique(pca.narm[,treatment_name])
as.character(unique(pca.narm[,treatment_name]))
for(g in as.character(unique(pca.narm[,treatment_name]))){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(pca.narm[pca.narm[,treatment_name]==g,], veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov,center=c(mean(PC_1),mean(PC_2))))),group=g))}
cbind(as.data.frame(with(pca.narm[pca.narm[,treatment_name]==g,], veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov,center=c(mean(PC_1),mean(PC_2))))),group=g)
rep(1/length(PC_1),length(PC_1)))$cov
length(PC_1)))$cov
length(PC_1))$cov
veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov
)
as.character(unique(pca.narm[,treatment_name]))
as.character(unique(pca.narm[,treatment_name]))[1]
g =as.character(unique(pca.narm[,treatment_name]))[1]
df_ell <- rbind(df_ell, cbind(as.data.frame(with(pca.narm[pca.narm[,treatment_name]==g,], veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov,center=c(mean(PC_1),mean(PC_2))))),group=g))}
pca.narm
treatment_name
for(g in unique(pca.narm[,treatment_name])){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(pca.narm[pca.narm[,treatment_name]==g,], veganCovEllipse(cov.wt(cbind(PC_1,PC_2),wt=rep(1/length(PC_1),length(PC_1)))$cov,center=c(mean(PC_1),mean(PC_2))))),group=g))}
